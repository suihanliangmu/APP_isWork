name: 热搜数据同步
on:
  schedule:
    - cron: '0 22,2,6,10 * * *'  # 每天22点、2点、6点、10点执行
  workflow_dispatch:  # 允许手动触发

jobs:
  fetch-and-sync:
    runs-on: ubuntu-latest
    timeout-minutes: 30  # 超时时间30分钟
    
    steps:
    - name: 检出代码库
      uses: actions/checkout@v3
      with:
        fetch-depth: 1  # 只检出最新版本，减少下载时间
        
    - name: 修复仓库所有权
      run: |
        git config --global --add safe.directory "$GITHUB_WORKSPACE"
        
    - name: 配置Python环境
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: 安装依赖
      run: |
        # 创建pip缓存目录
        mkdir -p ~/.cache/pip
        # 安装依赖
        pip install --no-cache-dir -r requirements.txt
        
    - name: 爬取数据
      run: python spider.py
      
    - name: 提交更改到GitHub
      id: github_commit
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add hot_data.txt
        if git diff --cached --exit-code --quiet; then
          echo "更新::无更改，跳过提交"
          echo "has_changes=false" >> $GITHUB_OUTPUT
        else
          git commit -m "更新数据 $(date '+%Y-%m-%d %H:%M:%S')"
          echo "更新::成功提交更改"
          echo "has_changes=true" >> $GITHUB_OUTPUT
        fi
        
    - name: 推送更改到GitHub
      if: steps.github_commit.outputs.has_changes == 'true'
      uses: ad-m/github-push-action@v0.6.0
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        branch: ${{ github.ref }}
      
    - name: 准备SSH配置
      id: prepare_ssh
      run: |
        # 生成时间戳用于临时目录命名
        TIMESTAMP=$(date +%s)
        echo "timestamp=$TIMESTAMP" >> $GITHUB_OUTPUT
        
        # 确保SSH目录存在并具有正确权限
        mkdir -p ~/.ssh
        chmod 700 ~/.ssh
        
        # 扫描Gitee主机密钥
        ssh-keyscan -t rsa gitee.com > ~/.ssh/known_hosts 2>/dev/null
        chmod 644 ~/.ssh/known_hosts
      
    - name: 配置SSH密钥 (可选)
      id: setup_ssh
      continue-on-error: true  # 允许此步骤失败但继续执行工作流
      env:
        SSH_PRIVATE_KEY: ${{ secrets.GITEE_PRIVATE_KEY }}
      run: |
        # 检查密钥是否设置
        if [ -z "$SSH_PRIVATE_KEY" ]; then
          echo "警告: GITEE_PRIVATE_KEY 密钥未设置，将使用HTTPS方式"
          echo "ssh_available=false" >> $GITHUB_OUTPUT
          exit 0
        fi
        
        # 写入密钥文件并设置权限
        echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        
        # 验证SSH配置
        ssh -T -o StrictHostKeyChecking=no -o BatchMode=yes git@gitee.com 2>&1 || true
        echo "ssh_available=true" >> $GITHUB_OUTPUT
        
    - name: 同步hot_data.txt到Gitee
      id: sync_to_gitee
      continue-on-error: true  # 允许此步骤失败但继续执行工作流
      env:
        TEMP_DIR: "/tmp/gitee-sync-${{ steps.prepare_ssh.outputs.timestamp }}"
        GITEE_USERNAME: ${{ secrets.GITEE_USERNAME }}
        GITEE_PASSWORD: ${{ secrets.GITEE_PASSWORD }}
      run: |
        set -x  # 输出执行的每条命令，便于调试
        
        # 创建临时目录
        mkdir -p "$TEMP_DIR"
        
        # 根据认证方式选择克隆URL
        CLONE_SUCCESS=false
        
        # 首先尝试HTTPS克隆（如果有用户名和密码）
        if [ -n "$GITEE_USERNAME" ] && [ -n "$GITEE_PASSWORD" ]; then
          echo "尝试使用HTTPS克隆Gitee仓库..."
          if git clone --depth=1 --single-branch --branch main https://${GITEE_USERNAME}:${GITEE_PASSWORD}@gitee.com/aodb/is-work-app.git "$TEMP_DIR" 2>/dev/null; then
            CLONE_SUCCESS=true
          fi
        fi
        
        # 如果HTTPS克隆失败且SSH可用，尝试SSH克隆
        if [ "$CLONE_SUCCESS" = false ] && [ -f ~/.ssh/id_rsa ]; then
          echo "尝试使用SSH克隆Gitee仓库..."
          if git clone --depth=1 --single-branch --branch main git@gitee.com:aodb/is-work-app.git "$TEMP_DIR" 2>/dev/null; then
            CLONE_SUCCESS=true
          fi
        fi
        
        # 如果上述方法都失败，创建一个新的仓库
        if [ "$CLONE_SUCCESS" = false ]; then
          echo "克隆失败，创建空仓库..."
          mkdir -p "$TEMP_DIR"
          cd "$TEMP_DIR"
          git init
          if [ -f ~/.ssh/id_rsa ]; then
            git remote add origin git@gitee.com:aodb/is-work-app.git
          else
            git remote add origin https://${GITEE_USERNAME}:${GITEE_PASSWORD}@gitee.com/aodb/is-work-app.git
          fi
          git checkout -b main || git checkout --orphan main
        fi
        
        # 拷贝热搜数据文件
        cp hot_data.txt "$TEMP_DIR/" || {
          echo "无法复制热搜数据文件，创建空文件"
          touch "$TEMP_DIR/hot_data.txt"
        }
        
        # 提交并推送
        cd "$TEMP_DIR"
        git config user.email "action@github.com"
        git config user.name "GitHub Action"
        git add hot_data.txt
        
        # 即使没有变更也创建提交（确保有分支存在）
        git commit --allow-empty -m "从GitHub更新热搜数据 $(date '+%Y-%m-%d %H:%M:%S')" || echo "提交失败，但继续执行"
        
        # 推送策略
        MAX_RETRIES=8
        RETRY_COUNT=0
        PUSH_SUCCESS=false
        
        until [ "$PUSH_SUCCESS" = true ] || [ $RETRY_COUNT -ge $MAX_RETRIES ]; do
          RETRY_COUNT=$((RETRY_COUNT+1))
          WAIT_TIME=$((RETRY_COUNT * 5))
          
          echo "尝试推送到Gitee (尝试 $RETRY_COUNT/$MAX_RETRIES)..."
          
          # 根据可用的认证方式选择推送方法
          if [ -f ~/.ssh/id_rsa ]; then
            echo "使用SSH推送..."
            # 确保remote使用SSH URL
            git remote set-url origin git@gitee.com:aodb/is-work-app.git
          elif [ -n "$GITEE_USERNAME" ] && [ -n "$GITEE_PASSWORD" ]; then
            echo "使用HTTPS推送..."
            # 确保remote使用HTTPS URL
            git remote set-url origin https://${GITEE_USERNAME}:${GITEE_PASSWORD}@gitee.com/aodb/is-work-app.git
          else
            echo "错误: 无可用的认证方式!"
            break
          fi
          
          if git push -f origin main; then
            PUSH_SUCCESS=true
            echo "推送成功!"
          else
            if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
              echo "推送失败，等待${WAIT_TIME}秒后重试..."
              sleep $WAIT_TIME
            fi
          fi
        done
        
        if [ "$PUSH_SUCCESS" = true ]; then
          echo "push_result=success" >> $GITHUB_OUTPUT
        else
          echo "push_result=failure" >> $GITHUB_OUTPUT
          echo "推送到Gitee失败，达到最大重试次数，但继续执行工作流"
        fi
        
    - name: 汇总结果
      if: always()  # 确保此步骤始终执行
      run: |
        echo "======================="
        echo "工作流执行结果汇总:"
        echo "GitHub提交: ${{ steps.github_commit.outcome }}"
        echo "Gitee同步: ${{ steps.sync_to_gitee.outcome }}"
        if [ "${{ steps.sync_to_gitee.outcome }}" == "success" ] && [ "${{ steps.sync_to_gitee.outputs.push_result }}" == "success" ]; then
          echo "Gitee数据同步成功!"
        elif [ "${{ steps.sync_to_gitee.outcome }}" == "success" ]; then
          echo "Gitee同步步骤执行完成，但推送可能未成功"
        else
          echo "Gitee同步步骤执行失败，但工作流将继续"
        fi
        echo "======================="
        
    - name: 清理
      if: always()  # 无论成功失败都执行清理
      run: |
        # 安全删除敏感文件
        if [ -f ~/.ssh/id_rsa ]; then
          rm -f ~/.ssh/id_rsa 2>/dev/null || true
        fi
        
        # 清理临时目录
        find /tmp -maxdepth 1 -name "gitee-sync-*" -type d -exec rm -rf {} \; 2>/dev/null || true
        
        # 删除可能的敏感环境变量
        unset GITEE_USERNAME
        unset GITEE_PASSWORD
        unset SSH_PRIVATE_KEY
