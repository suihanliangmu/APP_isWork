name: 热搜数据同步
on:
  schedule:
    - cron: '0 22,2,6,10 * * *'  # 每天22点、2点、6点、10点执行
  workflow_dispatch:  # 允许手动触发

jobs:
  fetch-and-sync:
    runs-on: ubuntu-latest
    timeout-minutes: 30  # 超时时间30分钟
    
    steps:
    - name: 检出代码库
      id: checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 1  # 只检出最新版本，减少下载时间
        
    - name: 修复仓库所有权
      id: fix_ownership
      run: |
        git config --global --add safe.directory "$GITHUB_WORKSPACE"
        
    - name: 配置Python环境
      id: setup_python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        # 移除pip缓存配置，避免缓存错误

    - name: 安装依赖
      id: install_deps
      run: |
        # 创建pip缓存目录
        mkdir -p ~/.cache/pip
        # 安装依赖
        pip install --no-cache-dir -r requirements.txt
        
    - name: 爬取数据
      id: fetch_data
      run: python spider.py
      
    - name: 提交更改到GitHub
      id: github_commit
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add hot_data.txt
        if git diff --cached --exit-code --quiet; then
          echo "更新::无更改，跳过提交"
          echo "has_changes=false" >> $GITHUB_OUTPUT
        else
          git commit -m "更新数据 $(date '+%Y-%m-%d %H:%M:%S')"
          echo "更新::成功提交更改"
          echo "has_changes=true" >> $GITHUB_OUTPUT
        fi
        
    - name: 推送更改到GitHub
      id: github_push
      if: steps.github_commit.outputs.has_changes == 'true'
      uses: ad-m/github-push-action@v0.6.0
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        branch: ${{ github.ref }}
      
    - name: 配置SSH密钥
      id: setup_ssh
      continue-on-error: true  # 即使此步骤失败，也继续执行后续步骤
      env:
        SSH_PRIVATE_KEY: ${{ secrets.GITEE_PRIVATE_KEY }}
      run: |
        # 设置默认结果，以防任何操作失败
        echo "ssh_available=false" >> $GITHUB_OUTPUT
        
        # 使用 || true 确保命令即使失败也不会导致脚本终止
        # 确保SSH目录存在并具有正确权限
        mkdir -p ~/.ssh || {
          echo "创建 ~/.ssh 目录失败，但继续执行"
        }
        chmod 700 ~/.ssh || {
          echo "设置 ~/.ssh 目录权限失败，但继续执行"
        }
    
        # 检查密钥是否设置
        if [ -z "$SSH_PRIVATE_KEY" ]; then
          echo "警告: GITEE_PRIVATE_KEY 密钥未设置，将使用HTTPS方式"
          exit 0
        fi
        
        # 写入密钥文件并设置权限，使用 || true 防止因错误终止
        echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa || {
          echo "写入SSH密钥失败，但继续执行"
          exit 0
        }
        chmod 600 ~/.ssh/id_rsa || {
          echo "设置SSH密钥权限失败，但继续执行"
          exit 0
        }
        
        # 扫描主机密钥并验证，使用超时防止网络问题导致长时间等待
        echo "扫描主机密钥..."
        timeout 10s ssh-keyscan -t rsa gitee.com > ~/.ssh/known_hosts 2>/dev/null || {
          echo "扫描主机密钥失败或超时，使用备用方法"
          # 如果扫描失败，使用硬编码的公钥作为备用方案
          echo "gitee.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDIXyvOLRzRjRqG4oOrw9eCQoGSEdDdYrNNKqwkGhGbJJ2x9rQMY+dEO1kP1HbtXc8wYdJ/eTmNKLNQSv/gU6SQHJcafZUGnJIkiQjJYgWJI8vsP5XRg4Pi/rYo5IBRgVDLQLxmvgOPGxZQ0cDWYHJOzA77AjpzMYKEXGbLiLPr4OxvHSvnEHK6/WIizoOG/z0yOhM/WxL+PrMvTJIwtZXWgj62Cq0/orFLunoyEE4FQVNUpV5JYsOYPxX3yoxbBycqtX5zwvnBo3qaTLFrZpWJQQOjY7QkS92aLR7A0QXzm0imz8DPdDiZecHgBZqY2ZyBnDMk+/yJRUXFKnJR03B5" > ~/.ssh/known_hosts
        }
        chmod 644 ~/.ssh/known_hosts || {
          echo "设置known_hosts权限失败，但继续执行"
        }
        
        # 测试SSH连接，使用超时防止卡住，并允许失败
        echo "测试SSH连接..."
        if timeout 10s ssh -o BatchMode=yes -o StrictHostKeyChecking=no -T git@gitee.com 2>&1 | grep -q "successfully authenticated"; then
          echo "SSH连接测试成功"
          echo "ssh_available=true" >> $GITHUB_OUTPUT
        else
          echo "SSH连接测试失败，但将继续尝试使用SSH"
          echo "ssh_available=true" >> $GITHUB_OUTPUT
        fi
        
    - name: 同步hot_data.txt到Gitee
      id: sync_to_gitee
      if: always()  # 无论前面步骤是否成功都执行
      env:
        TEMP_DIR: "/tmp/gitee-sync-${{ github.run_id }}"
      run: |
        set -x  # 输出执行的每条命令，便于调试
        
        # 创建临时目录
        mkdir -p "$TEMP_DIR"
        
        # 尝试使用HTTPS克隆（不需要SSH密钥）
        echo "尝试使用HTTPS克隆Gitee仓库..."
        if ! git clone --depth=1 --single-branch --branch main https://gitee.com/aodb/is-work-app.git "$TEMP_DIR"; then
          echo "HTTPS克隆失败，尝试使用SSH克隆..."
          if ! git clone --depth=1 --single-branch --branch main git@gitee.com:aodb/is-work-app.git "$TEMP_DIR"; then
            echo "克隆失败，创建空仓库..."
            mkdir -p "$TEMP_DIR"
            cd "$TEMP_DIR"
            git init
            git remote add origin git@gitee.com:aodb/is-work-app.git
            git checkout -b main || git checkout --orphan main
          fi
        fi
        
        # 拷贝热搜数据文件
        cp hot_data.txt "$TEMP_DIR/" || {
          echo "无法复制热搜数据文件，创建空文件"
          touch "$TEMP_DIR/hot_data.txt"
        }
        
        # 提交并推送
        cd "$TEMP_DIR"
        git config user.email "action@github.com"
        git config user.name "GitHub Action"
        git add hot_data.txt
        
        # 即使没有变更也创建提交（确保有分支存在）
        git commit --allow-empty -m "从GitHub更新热搜数据 $(date '+%Y-%m-%d %H:%M:%S')" || echo "提交失败，但继续执行"
        
        # 尝试使用HTTPS推送（需要用户名和密码）
        if [ -n "${{ secrets.GITEE_USERNAME }}" ] && [ -n "${{ secrets.GITEE_PASSWORD }}" ]; then
          echo "尝试使用HTTPS推送..."
          git remote set-url origin https://${{ secrets.GITEE_USERNAME }}:${{ secrets.GITEE_PASSWORD }}@gitee.com/aodb/is-work-app.git
        fi
        
        # 使用递增延迟的重试策略，增加重试次数
        MAX_RETRIES=8  # 增加到8次重试
        RETRY_COUNT=0
        PUSH_SUCCESS=false
        
        until [ "$PUSH_SUCCESS" = true ] || [ $RETRY_COUNT -ge $MAX_RETRIES ]; do
          RETRY_COUNT=$((RETRY_COUNT+1))
          WAIT_TIME=$((RETRY_COUNT * 5))  # 增加等待时间到每次5秒递增
          
          echo "尝试推送到Gitee (尝试 $RETRY_COUNT/$MAX_RETRIES)..."
          if git push -f origin main; then
            PUSH_SUCCESS=true
            echo "推送成功!"
          else
            if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
              echo "推送失败，等待${WAIT_TIME}秒后重试..."
              sleep $WAIT_TIME
            fi
          fi
        done
        
        if [ "$PUSH_SUCCESS" != true ]; then
          echo "推送到Gitee失败，达到最大重试次数，但继续执行工作流"
          # 不退出，让工作流继续执行
        fi
        
    - name: 汇总执行情况
      id: summary
      if: always()  # 无论成功失败都执行
      run: |
        echo "======= 工作流执行情况汇总 ======="
        
        # 直接检查每个步骤的状态
        # GitHub Actions 在工作流中不支持通过变量名间接引用，所以我们改用直接判断
        
        # 检出代码库
        if [ "${{ steps.checkout.conclusion }}" == "success" ]; then
          echo "✅ 检出代码库: 成功"
        elif [ "${{ steps.checkout.conclusion }}" == "skipped" ]; then
          echo "⏭️ 检出代码库: 已跳过"
        else
          echo "❌ 检出代码库: 失败 (${{ steps.checkout.conclusion }})"
        fi
        
        # 修复仓库所有权
        if [ "${{ steps.fix_ownership.conclusion }}" == "success" ]; then
          echo "✅ 修复仓库所有权: 成功"
        elif [ "${{ steps.fix_ownership.conclusion }}" == "skipped" ]; then
          echo "⏭️ 修复仓库所有权: 已跳过"
        else
          echo "❌ 修复仓库所有权: 失败 (${{ steps.fix_ownership.conclusion }})"
        fi
        
        # 配置Python环境
        if [ "${{ steps.setup_python.conclusion }}" == "success" ]; then
          echo "✅ 配置Python环境: 成功"
        elif [ "${{ steps.setup_python.conclusion }}" == "skipped" ]; then
          echo "⏭️ 配置Python环境: 已跳过"
        else
          echo "❌ 配置Python环境: 失败 (${{ steps.setup_python.conclusion }})"
        fi
        
        # 安装依赖
        if [ "${{ steps.install_deps.conclusion }}" == "success" ]; then
          echo "✅ 安装依赖: 成功"
        elif [ "${{ steps.install_deps.conclusion }}" == "skipped" ]; then
          echo "⏭️ 安装依赖: 已跳过"
        else
          echo "❌ 安装依赖: 失败 (${{ steps.install_deps.conclusion }})"
        fi
        
        # 爬取数据
        if [ "${{ steps.fetch_data.conclusion }}" == "success" ]; then
          echo "✅ 爬取数据: 成功"
        elif [ "${{ steps.fetch_data.conclusion }}" == "skipped" ]; then
          echo "⏭️ 爬取数据: 已跳过"
        else
          echo "❌ 爬取数据: 失败 (${{ steps.fetch_data.conclusion }})"
        fi
        
        # 提交更改到GitHub
        if [ "${{ steps.github_commit.conclusion }}" == "success" ]; then
          echo "✅ 提交更改到GitHub: 成功"
        elif [ "${{ steps.github_commit.conclusion }}" == "skipped" ]; then
          echo "⏭️ 提交更改到GitHub: 已跳过"
        else
          echo "❌ 提交更改到GitHub: 失败 (${{ steps.github_commit.conclusion }})"
        fi
        
        # 推送更改到GitHub
        if [ "${{ steps.github_commit.outputs.has_changes }}" == "true" ]; then
          if [ "${{ steps.github_push.conclusion }}" == "success" ]; then
            echo "✅ 推送更改到GitHub: 成功"
          elif [ "${{ steps.github_push.conclusion }}" == "skipped" ]; then
            echo "⏭️ 推送更改到GitHub: 已跳过"
          else
            echo "❌ 推送更改到GitHub: 失败 (${{ steps.github_push.conclusion }})"
          fi
        else
          echo "⏭️ 推送更改到GitHub: 没有变更，已跳过"
        fi
        
        # 配置SSH密钥
        if [ "${{ steps.setup_ssh.conclusion }}" == "success" ]; then
          echo "✅ 配置SSH密钥: 成功"
        else
          echo "⚠️ 配置SSH密钥: ${{ steps.setup_ssh.conclusion }}，但已继续执行"
        fi
        
        # 同步到Gitee
        if [ "${{ steps.sync_to_gitee.conclusion }}" == "success" ]; then
          echo "✅ 同步hot_data.txt到Gitee: 成功"
        elif [ "${{ steps.sync_to_gitee.conclusion }}" == "skipped" ]; then
          echo "⏭️ 同步hot_data.txt到Gitee: 已跳过"
        else
          echo "❌ 同步hot_data.txt到Gitee: 失败 (${{ steps.sync_to_gitee.conclusion }})"
        fi
        
        echo "====================================="

    - name: 清理
      id: cleanup
      if: always()  # 无论成功失败都执行清理
      run: |
        # 安全删除敏感文件
        if [ -f ~/.ssh/id_rsa ]; then
          rm -f ~/.ssh/id_rsa 2>/dev/null || true
        fi
        
        # 清理临时目录
        find /tmp -maxdepth 1 -name "gitee-sync-*" -type d -exec rm -rf {} \; 2>/dev/null || true
        
        # 删除可能的敏感环境变量
        unset GITEE_USERNAME
        unset GITEE_PASSWORD
        unset SSH_PRIVATE_KEY
