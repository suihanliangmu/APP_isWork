name: 热搜数据同步
on:
  schedule:
    - cron: '0 22-23,0-14 * * *'  # 每天22-23点和0-14点整点执行
  workflow_dispatch:  # 允许手动触发

jobs:
  fetch-and-sync:
    runs-on: ubuntu-latest
    timeout-minutes: 15  # 设置超时时间
    
    steps:
    - name: 检出代码库
      uses: actions/checkout@v3
      with:
        fetch-depth: 1  # 只检出最新版本，减少下载时间
        
    - name: 修复仓库所有权
      run: |
        git config --global --add safe.directory "$GITHUB_WORKSPACE"
        
    - name: 配置Python环境
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        cache: 'pip'  # 缓存pip依赖以加速安装

    - name: 安装依赖
      run: |
        pip install --no-cache-dir -r requirements.txt
        
    - name: 爬取数据
      run: python spider.py
      
    - name: 提交更改到GitHub
      id: github_commit
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add hot_data.txt
        if git diff --cached --exit-code --quiet; then
          echo "更新::无更改，跳过提交"
          echo "has_changes=false" >> $GITHUB_OUTPUT
        else
          git commit -m "更新数据 $(date '+%Y-%m-%d %H:%M:%S')"
          echo "更新::成功提交更改"
          echo "has_changes=true" >> $GITHUB_OUTPUT
        fi
        
    - name: 推送更改到GitHub
      if: steps.github_commit.outputs.has_changes == 'true'
      uses: ad-m/github-push-action@v0.6.0
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        branch: ${{ github.ref }}
      
    - name: 准备SSH目录
      id: prepare_ssh
      run: |
        mkdir -p ~/.ssh
        chmod 700 ~/.ssh
        echo "timestamp=$(date '+%Y%m%d%H%M%S')" >> $GITHUB_OUTPUT
      
    - name: 配置SSH密钥
      env:
        SSH_PRIVATE_KEY: ${{ secrets.GITEE_PRIVATE_KEY }}
      run: |
        # 确保变量非空
        if [ -z "$SSH_PRIVATE_KEY" ]; then
          echo "错误: GITEE_PRIVATE_KEY 密钥未设置"
          exit 1
        fi
        
        # 写入密钥文件
        echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        
        # 扫描主机密钥并验证
        ssh-keyscan -t rsa gitee.com > ~/.ssh/known_hosts
        chmod 644 ~/.ssh/known_hosts
        
        # 验证密钥格式
        ssh-keygen -l -f ~/.ssh/id_rsa || {
          echo "错误: SSH密钥格式无效"
          exit 1
        }
        
    - name: 测试SSH连接
      id: test_ssh
      continue-on-error: true
      run: |
        # 尝试连接并记录结果
        ssh -o BatchMode=yes -o StrictHostKeyChecking=accept-new -T git@gitee.com 2>&1 || test $? -eq 1
        
    - name: 同步hot_data.txt到Gitee
      if: steps.test_ssh.outcome == 'success'
      id: sync_to_gitee
      env:
        TEMP_DIR: "/tmp/gitee-sync-${{ steps.prepare_ssh.outputs.timestamp }}"
      run: |
        set -e  # 出错立即退出
        
        # 创建临时目录
        mkdir -p "$TEMP_DIR"
        
        # 使用更可靠的克隆策略
        echo "开始克隆Gitee仓库..."
        git clone --depth=1 --single-branch --branch main git@gitee.com:aodb/is-work-app.git "$TEMP_DIR" || {
          echo "克隆失败，创建空仓库..."
          mkdir -p "$TEMP_DIR"
          cd "$TEMP_DIR"
          git init
          git remote add origin git@gitee.com:aodb/is-work-app.git
          git checkout -b main
        }
        
        # 拷贝热搜数据文件
        cp hot_data.txt "$TEMP_DIR/"
        
        # 提交并推送
        cd "$TEMP_DIR"
        git config user.email "action@github.com"
        git config user.name "GitHub Action"
        git add hot_data.txt
        
        # 即使没有变更也创建提交（确保有分支存在）
        git commit --allow-empty -m "从GitHub更新热搜数据 $(date '+%Y-%m-%d %H:%M:%S')"
        
        # 使用递增延迟的重试策略
        MAX_RETRIES=5
        RETRY_COUNT=0
        PUSH_SUCCESS=false
        
        until [ "$PUSH_SUCCESS" = true ] || [ $RETRY_COUNT -ge $MAX_RETRIES ]; do
          RETRY_COUNT=$((RETRY_COUNT+1))
          WAIT_TIME=$((RETRY_COUNT * 3))
          
          echo "尝试推送到Gitee (尝试 $RETRY_COUNT/$MAX_RETRIES)..."
          if git push -f origin main; then
            PUSH_SUCCESS=true
            echo "推送成功!"
          else
            if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
              echo "推送失败，等待${WAIT_TIME}秒后重试..."
              sleep $WAIT_TIME
            fi
          fi
        done
        
        if [ "$PUSH_SUCCESS" != true ]; then
          echo "推送到Gitee失败，达到最大重试次数"
          exit 1
        fi
        
    - name: 清理
      if: always()  # 无论成功失败都执行清理
      run: |
        # 安全删除敏感文件
        if [ -f ~/.ssh/id_rsa ]; then
          shred -u ~/.ssh/id_rsa 2>/dev/null || rm -f ~/.ssh/id_rsa
        fi
        
        # 清理临时目录
        if [ -n "${{ steps.prepare_ssh.outputs.timestamp }}" ]; then
          rm -rf "/tmp/gitee-sync-${{ steps.prepare_ssh.outputs.timestamp }}"
        fi
